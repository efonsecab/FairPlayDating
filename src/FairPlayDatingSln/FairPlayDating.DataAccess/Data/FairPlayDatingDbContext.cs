// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using FairPlayDating.DataAccess.Models;

#nullable disable

namespace FairPlayDating.DataAccess.Data
{
    public partial class FairPlayDatingDbContext : DbContext
    {
        public FairPlayDatingDbContext()
        {
        }

        public FairPlayDatingDbContext(DbContextOptions<FairPlayDatingDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Activity> Activity { get; set; }
        public virtual DbSet<ApplicationRole> ApplicationRole { get; set; }
        public virtual DbSet<ApplicationUser> ApplicationUser { get; set; }
        public virtual DbSet<ApplicationUserRole> ApplicationUserRole { get; set; }
        public virtual DbSet<ErrorLog> ErrorLog { get; set; }
        public virtual DbSet<EyesColor> EyesColor { get; set; }
        public virtual DbSet<Frequency> Frequency { get; set; }
        public virtual DbSet<HairColor> HairColor { get; set; }
        public virtual DbSet<KidStatus> KidStatus { get; set; }
        public virtual DbSet<UserActivity> UserActivity { get; set; }
        public virtual DbSet<UserFeedback> UserFeedback { get; set; }
        public virtual DbSet<UserInvitation> UserInvitation { get; set; }
        public virtual DbSet<UserMessage> UserMessage { get; set; }
        public virtual DbSet<UserProfile> UserProfile { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Scaffolding:ConnectionString", "Data Source=(local);Initial Catalog=FairPlayDating.Database;Integrated Security=true");

            modelBuilder.Entity<ApplicationUserRole>(entity =>
            {
                entity.HasOne(d => d.ApplicationRole)
                    .WithMany(p => p.ApplicationUserRole)
                    .HasForeignKey(d => d.ApplicationRoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApplicationUserRole_ApplicationRole");

                entity.HasOne(d => d.ApplicationUser)
                    .WithOne(p => p.ApplicationUserRole)
                    .HasForeignKey<ApplicationUserRole>(d => d.ApplicationUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApplicationUserRole_ApplicationUser");
            });

            modelBuilder.Entity<UserActivity>(entity =>
            {
                entity.HasOne(d => d.Activity)
                    .WithMany(p => p.UserActivity)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserActivity_Activity");

                entity.HasOne(d => d.ApplicationUser)
                    .WithMany(p => p.UserActivity)
                    .HasForeignKey(d => d.ApplicationUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserActivity_ApplicationUser");

                entity.HasOne(d => d.Frequency)
                    .WithMany(p => p.UserActivity)
                    .HasForeignKey(d => d.FrequencyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserActivity_Frequency");
            });

            modelBuilder.Entity<UserFeedback>(entity =>
            {
                entity.HasOne(d => d.ApplicationUser)
                    .WithMany(p => p.UserFeedback)
                    .HasForeignKey(d => d.ApplicationUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserFeedback_ApplicationUserId");
            });

            modelBuilder.Entity<UserInvitation>(entity =>
            {
                entity.HasOne(d => d.InvitingApplicationUser)
                    .WithMany(p => p.UserInvitation)
                    .HasForeignKey(d => d.InvitingApplicationUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserInvitation_InvitingApplicationUserId");
            });

            modelBuilder.Entity<UserMessage>(entity =>
            {
                entity.HasOne(d => d.FromApplicationUser)
                    .WithMany(p => p.UserMessageFromApplicationUser)
                    .HasForeignKey(d => d.FromApplicationUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FromApplicationUserId_ApplicationUser");

                entity.HasOne(d => d.ToApplicationUser)
                    .WithMany(p => p.UserMessageToApplicationUser)
                    .HasForeignKey(d => d.ToApplicationUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ToApplicationUserId_ApplicationUser");
            });

            modelBuilder.Entity<UserProfile>(entity =>
            {
                entity.HasOne(d => d.ApplicationUser)
                    .WithMany(p => p.UserProfile)
                    .HasForeignKey(d => d.ApplicationUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApplicationUserId_UserProfile");

                entity.HasOne(d => d.EyesColor)
                    .WithMany(p => p.UserProfile)
                    .HasForeignKey(d => d.EyesColorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserProfile_EyesColor");

                entity.HasOne(d => d.HairColor)
                    .WithMany(p => p.UserProfile)
                    .HasForeignKey(d => d.HairColorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserProfile_HairColor");

                entity.HasOne(d => d.KidStatus)
                    .WithMany(p => p.UserProfileKidStatus)
                    .HasForeignKey(d => d.KidStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserProfile_KidStatus");

                entity.HasOne(d => d.PreferredKidStatus)
                    .WithMany(p => p.UserProfilePreferredKidStatus)
                    .HasForeignKey(d => d.PreferredKidStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserProfile_PreferredKidStatus");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}